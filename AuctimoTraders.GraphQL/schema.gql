# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AppRoles {
  CreatedAt: DateTime!
  DeletedAt: DateTime
  Id: String!
  Name: String
  RoleClaims(cursor: RoleClaimsWhereUniqueInput, distinct: [RoleClaimsScalarFieldEnum!], orderBy: [RoleClaimsOrderByInput!], skip: Int, take: Int, where: RoleClaimsWhereInput): [RoleClaims!]!
  UpdatedAt: DateTime!
  UserRoles(cursor: UserRolesWhereUniqueInput, distinct: [UserRolesScalarFieldEnum!], orderBy: [UserRolesOrderByInput!], skip: Int, take: Int, where: UserRolesWhereInput): [UserRoles!]!
}

input AppRolesCreateInput {
  CreatedAt: DateTime
  DeletedAt: DateTime
  Id: String!
  Name: String
  RoleClaims: RoleClaimsCreateNestedManyWithoutAppRolesInput
  UpdatedAt: DateTime
  UserRoles: UserRolesCreateNestedManyWithoutAppRolesInput
}

input AppRolesCreateNestedOneWithoutUserRolesInput {
  connect: AppRolesWhereUniqueInput
  connectOrCreate: AppRolesCreateOrConnectWithoutUserRolesInput
  create: AppRolesCreateWithoutUserRolesInput
}

input AppRolesCreateOrConnectWithoutUserRolesInput {
  create: AppRolesCreateWithoutUserRolesInput!
  where: AppRolesWhereUniqueInput!
}

input AppRolesCreateWithoutUserRolesInput {
  CreatedAt: DateTime
  DeletedAt: DateTime
  Id: String!
  Name: String
  RoleClaims: RoleClaimsCreateNestedManyWithoutAppRolesInput
  UpdatedAt: DateTime
}

input AppRolesOrderByInput {
  CreatedAt: SortOrder
  DeletedAt: SortOrder
  Id: SortOrder
  Name: SortOrder
  UpdatedAt: SortOrder
}

input AppRolesRelationFilter {
  is: AppRolesWhereInput
  isNot: AppRolesWhereInput
}

enum AppRolesScalarFieldEnum {
  CreatedAt
  DeletedAt
  Id
  Name
  UpdatedAt
}

input AppRolesWhereInput {
  AND: [AppRolesWhereInput!]
  CreatedAt: DateTimeFilter
  DeletedAt: DateTimeNullableFilter
  Id: StringFilter
  NOT: [AppRolesWhereInput!]
  Name: StringNullableFilter
  OR: [AppRolesWhereInput!]
  RoleClaims: RoleClaimsListRelationFilter
  UpdatedAt: DateTimeFilter
  UserRoles: UserRolesListRelationFilter
}

input AppRolesWhereUniqueInput {
  Id: String
}

type AppUsers {
  Countries: Countries
  CreatedAt: DateTime!
  DOB: DateTime!
  DeletedAt: DateTime
  Email: String
  FirstName: String
  Gender: Int!
  Id: String!
  JoiningDay: Int!
  JoiningMonth: Int!
  JoiningMonthName: String
  JoiningQuarter: Int!
  JoiningYear: Int!
  LastName: String
  PhoneNumber: String
  Regions: Regions
  Salary: Float!
  Sales(cursor: SalesWhereUniqueInput, distinct: [SalesScalarFieldEnum!], orderBy: [SalesOrderByInput!], skip: Int, take: Int, where: SalesWhereInput): [Sales!]!
  Serial: Int!
  UpdatedAt: DateTime!
  UserClaims(cursor: UserClaimsWhereUniqueInput, distinct: [UserClaimsScalarFieldEnum!], orderBy: [UserClaimsOrderByInput!], skip: Int, take: Int, where: UserClaimsWhereInput): [UserClaims!]!
  UserLogins(cursor: UserLoginsWhereUniqueInput, distinct: [UserLoginsScalarFieldEnum!], orderBy: [UserLoginsOrderByInput!], skip: Int, take: Int, where: UserLoginsWhereInput): [UserLogins!]!
  UserRoles(cursor: UserRolesWhereUniqueInput, distinct: [UserRolesScalarFieldEnum!], orderBy: [UserRolesOrderByInput!], skip: Int, take: Int, where: UserRolesWhereInput): [UserRoles!]!
  UserTokens(cursor: UserTokensWhereUniqueInput, distinct: [UserTokensScalarFieldEnum!], orderBy: [UserTokensOrderByInput!], skip: Int, take: Int, where: UserTokensWhereInput): [UserTokens!]!
  Weight: Float!
}

input AppUsersCreateInput {
  Countries: CountriesCreateNestedOneWithoutAppUsersInput
  CreatedAt: DateTime
  DOB: DateTime!
  DeletedAt: DateTime
  Email: String
  FirstName: String
  Gender: Int!
  Id: String!
  JoiningDay: Int!
  JoiningMonth: Int!
  JoiningMonthName: String
  JoiningQuarter: Int!
  JoiningYear: Int!
  LastName: String
  PhoneNumber: String
  Regions: RegionsCreateNestedOneWithoutAppUsersInput
  Salary: Float!
  Sales: SalesCreateNestedManyWithoutAppUsersInput
  Serial: Int!
  UpdatedAt: DateTime
  UserClaims: UserClaimsCreateNestedManyWithoutAppUsersInput
  UserLogins: UserLoginsCreateNestedManyWithoutAppUsersInput
  UserRoles: UserRolesCreateNestedManyWithoutAppUsersInput
  UserTokens: UserTokensCreateNestedManyWithoutAppUsersInput
  Weight: Float!
}

input AppUsersCreateNestedOneWithoutCountriesInput {
  connect: AppUsersWhereUniqueInput
  connectOrCreate: AppUsersCreateOrConnectWithoutCountriesInput
  create: AppUsersCreateWithoutCountriesInput
}

input AppUsersCreateNestedOneWithoutRegionsInput {
  connect: AppUsersWhereUniqueInput
  connectOrCreate: AppUsersCreateOrConnectWithoutRegionsInput
  create: AppUsersCreateWithoutRegionsInput
}

input AppUsersCreateNestedOneWithoutSalesInput {
  connect: AppUsersWhereUniqueInput
  connectOrCreate: AppUsersCreateOrConnectWithoutSalesInput
  create: AppUsersCreateWithoutSalesInput
}

input AppUsersCreateNestedOneWithoutUserRolesInput {
  connect: AppUsersWhereUniqueInput
  connectOrCreate: AppUsersCreateOrConnectWithoutUserRolesInput
  create: AppUsersCreateWithoutUserRolesInput
}

input AppUsersCreateOrConnectWithoutCountriesInput {
  create: AppUsersCreateWithoutCountriesInput!
  where: AppUsersWhereUniqueInput!
}

input AppUsersCreateOrConnectWithoutRegionsInput {
  create: AppUsersCreateWithoutRegionsInput!
  where: AppUsersWhereUniqueInput!
}

input AppUsersCreateOrConnectWithoutSalesInput {
  create: AppUsersCreateWithoutSalesInput!
  where: AppUsersWhereUniqueInput!
}

input AppUsersCreateOrConnectWithoutUserRolesInput {
  create: AppUsersCreateWithoutUserRolesInput!
  where: AppUsersWhereUniqueInput!
}

input AppUsersCreateWithoutCountriesInput {
  CreatedAt: DateTime
  DOB: DateTime!
  DeletedAt: DateTime
  Email: String
  FirstName: String
  Gender: Int!
  Id: String!
  JoiningDay: Int!
  JoiningMonth: Int!
  JoiningMonthName: String
  JoiningQuarter: Int!
  JoiningYear: Int!
  LastName: String
  PhoneNumber: String
  Regions: RegionsCreateNestedOneWithoutAppUsersInput
  Salary: Float!
  Sales: SalesCreateNestedManyWithoutAppUsersInput
  Serial: Int!
  UpdatedAt: DateTime
  UserClaims: UserClaimsCreateNestedManyWithoutAppUsersInput
  UserLogins: UserLoginsCreateNestedManyWithoutAppUsersInput
  UserRoles: UserRolesCreateNestedManyWithoutAppUsersInput
  UserTokens: UserTokensCreateNestedManyWithoutAppUsersInput
  Weight: Float!
}

input AppUsersCreateWithoutRegionsInput {
  Countries: CountriesCreateNestedOneWithoutAppUsersInput
  CreatedAt: DateTime
  DOB: DateTime!
  DeletedAt: DateTime
  Email: String
  FirstName: String
  Gender: Int!
  Id: String!
  JoiningDay: Int!
  JoiningMonth: Int!
  JoiningMonthName: String
  JoiningQuarter: Int!
  JoiningYear: Int!
  LastName: String
  PhoneNumber: String
  Salary: Float!
  Sales: SalesCreateNestedManyWithoutAppUsersInput
  Serial: Int!
  UpdatedAt: DateTime
  UserClaims: UserClaimsCreateNestedManyWithoutAppUsersInput
  UserLogins: UserLoginsCreateNestedManyWithoutAppUsersInput
  UserRoles: UserRolesCreateNestedManyWithoutAppUsersInput
  UserTokens: UserTokensCreateNestedManyWithoutAppUsersInput
  Weight: Float!
}

input AppUsersCreateWithoutSalesInput {
  Countries: CountriesCreateNestedOneWithoutAppUsersInput
  CreatedAt: DateTime
  DOB: DateTime!
  DeletedAt: DateTime
  Email: String
  FirstName: String
  Gender: Int!
  Id: String!
  JoiningDay: Int!
  JoiningMonth: Int!
  JoiningMonthName: String
  JoiningQuarter: Int!
  JoiningYear: Int!
  LastName: String
  PhoneNumber: String
  Regions: RegionsCreateNestedOneWithoutAppUsersInput
  Salary: Float!
  Serial: Int!
  UpdatedAt: DateTime
  UserClaims: UserClaimsCreateNestedManyWithoutAppUsersInput
  UserLogins: UserLoginsCreateNestedManyWithoutAppUsersInput
  UserRoles: UserRolesCreateNestedManyWithoutAppUsersInput
  UserTokens: UserTokensCreateNestedManyWithoutAppUsersInput
  Weight: Float!
}

input AppUsersCreateWithoutUserRolesInput {
  Countries: CountriesCreateNestedOneWithoutAppUsersInput
  CreatedAt: DateTime
  DOB: DateTime!
  DeletedAt: DateTime
  Email: String
  FirstName: String
  Gender: Int!
  Id: String!
  JoiningDay: Int!
  JoiningMonth: Int!
  JoiningMonthName: String
  JoiningQuarter: Int!
  JoiningYear: Int!
  LastName: String
  PhoneNumber: String
  Regions: RegionsCreateNestedOneWithoutAppUsersInput
  Salary: Float!
  Sales: SalesCreateNestedManyWithoutAppUsersInput
  Serial: Int!
  UpdatedAt: DateTime
  UserClaims: UserClaimsCreateNestedManyWithoutAppUsersInput
  UserLogins: UserLoginsCreateNestedManyWithoutAppUsersInput
  UserTokens: UserTokensCreateNestedManyWithoutAppUsersInput
  Weight: Float!
}

input AppUsersOrderByInput {
  CreatedAt: SortOrder
  DOB: SortOrder
  DeletedAt: SortOrder
  Email: SortOrder
  FirstName: SortOrder
  Gender: SortOrder
  Id: SortOrder
  JoiningDay: SortOrder
  JoiningMonth: SortOrder
  JoiningMonthName: SortOrder
  JoiningQuarter: SortOrder
  JoiningYear: SortOrder
  LastName: SortOrder
  PhoneNumber: SortOrder
  Salary: SortOrder
  Serial: SortOrder
  UpdatedAt: SortOrder
  Weight: SortOrder
}

input AppUsersRelationFilter {
  is: AppUsersWhereInput
  isNot: AppUsersWhereInput
}

enum AppUsersScalarFieldEnum {
  CreatedAt
  DOB
  DeletedAt
  Email
  FirstName
  Gender
  Id
  JoiningDay
  JoiningMonth
  JoiningMonthName
  JoiningQuarter
  JoiningYear
  LastName
  PhoneNumber
  Salary
  Serial
  UpdatedAt
  Weight
}

input AppUsersWhereInput {
  AND: [AppUsersWhereInput!]
  Countries: CountriesRelationFilter
  CreatedAt: DateTimeFilter
  DOB: DateTimeFilter
  DeletedAt: DateTimeNullableFilter
  Email: StringNullableFilter
  FirstName: StringNullableFilter
  Gender: IntFilter
  Id: StringFilter
  JoiningDay: IntFilter
  JoiningMonth: IntFilter
  JoiningMonthName: StringNullableFilter
  JoiningQuarter: IntFilter
  JoiningYear: IntFilter
  LastName: StringNullableFilter
  NOT: [AppUsersWhereInput!]
  OR: [AppUsersWhereInput!]
  PhoneNumber: StringNullableFilter
  Regions: RegionsRelationFilter
  Salary: FloatFilter
  Sales: SalesListRelationFilter
  Serial: IntFilter
  UpdatedAt: DateTimeFilter
  UserClaims: UserClaimsListRelationFilter
  UserLogins: UserLoginsListRelationFilter
  UserRoles: UserRolesListRelationFilter
  UserTokens: UserTokensListRelationFilter
  Weight: FloatFilter
}

input AppUsersWhereUniqueInput {
  Id: String
}

type Countries {
  AppUsers: AppUsers!
  CountryManagerId: String!
  CountryName: String
  CreatedAt: DateTime!
  DeletedAt: DateTime
  Id: String!
  RegionId: String
  Regions: Regions
  Sales(cursor: SalesWhereUniqueInput, distinct: [SalesScalarFieldEnum!], orderBy: [SalesOrderByInput!], skip: Int, take: Int, where: SalesWhereInput): [Sales!]!
  UpdatedAt: DateTime!
}

input CountriesCreateInput {
  AppUsers: AppUsersCreateNestedOneWithoutCountriesInput!
  CountryName: String
  CreatedAt: DateTime
  DeletedAt: DateTime
  Id: String!
  Regions: RegionsCreateNestedOneWithoutCountriesInput
  Sales: SalesCreateNestedManyWithoutCountriesInput
  UpdatedAt: DateTime
}

input CountriesCreateManyRegionsInput {
  CountryManagerId: String!
  CountryName: String
  CreatedAt: DateTime
  DeletedAt: DateTime
  Id: String!
  UpdatedAt: DateTime
}

input CountriesCreateManyRegionsInputEnvelope {
  data: [CountriesCreateManyRegionsInput!]!
}

input CountriesCreateNestedManyWithoutRegionsInput {
  connect: [CountriesWhereUniqueInput!]
  connectOrCreate: [CountriesCreateOrConnectWithoutRegionsInput!]
  create: [CountriesCreateWithoutRegionsInput!]
  createMany: CountriesCreateManyRegionsInputEnvelope
}

input CountriesCreateNestedOneWithoutAppUsersInput {
  connect: CountriesWhereUniqueInput
  connectOrCreate: CountriesCreateOrConnectWithoutAppUsersInput
  create: CountriesCreateWithoutAppUsersInput
}

input CountriesCreateNestedOneWithoutSalesInput {
  connect: CountriesWhereUniqueInput
  connectOrCreate: CountriesCreateOrConnectWithoutSalesInput
  create: CountriesCreateWithoutSalesInput
}

input CountriesCreateOrConnectWithoutAppUsersInput {
  create: CountriesCreateWithoutAppUsersInput!
  where: CountriesWhereUniqueInput!
}

input CountriesCreateOrConnectWithoutRegionsInput {
  create: CountriesCreateWithoutRegionsInput!
  where: CountriesWhereUniqueInput!
}

input CountriesCreateOrConnectWithoutSalesInput {
  create: CountriesCreateWithoutSalesInput!
  where: CountriesWhereUniqueInput!
}

input CountriesCreateWithoutAppUsersInput {
  CountryName: String
  CreatedAt: DateTime
  DeletedAt: DateTime
  Id: String!
  Regions: RegionsCreateNestedOneWithoutCountriesInput
  Sales: SalesCreateNestedManyWithoutCountriesInput
  UpdatedAt: DateTime
}

input CountriesCreateWithoutRegionsInput {
  AppUsers: AppUsersCreateNestedOneWithoutCountriesInput!
  CountryName: String
  CreatedAt: DateTime
  DeletedAt: DateTime
  Id: String!
  Sales: SalesCreateNestedManyWithoutCountriesInput
  UpdatedAt: DateTime
}

input CountriesCreateWithoutSalesInput {
  AppUsers: AppUsersCreateNestedOneWithoutCountriesInput!
  CountryName: String
  CreatedAt: DateTime
  DeletedAt: DateTime
  Id: String!
  Regions: RegionsCreateNestedOneWithoutCountriesInput
  UpdatedAt: DateTime
}

input CountriesListRelationFilter {
  every: CountriesWhereInput
  none: CountriesWhereInput
  some: CountriesWhereInput
}

input CountriesOrderByInput {
  CountryManagerId: SortOrder
  CountryName: SortOrder
  CreatedAt: SortOrder
  DeletedAt: SortOrder
  Id: SortOrder
  RegionId: SortOrder
  UpdatedAt: SortOrder
}

input CountriesRelationFilter {
  is: CountriesWhereInput
  isNot: CountriesWhereInput
}

enum CountriesScalarFieldEnum {
  CountryManagerId
  CountryName
  CreatedAt
  DeletedAt
  Id
  RegionId
  UpdatedAt
}

input CountriesWhereInput {
  AND: [CountriesWhereInput!]
  AppUsers: AppUsersRelationFilter
  CountryManagerId: StringFilter
  CountryName: StringNullableFilter
  CreatedAt: DateTimeFilter
  DeletedAt: DateTimeNullableFilter
  Id: StringFilter
  NOT: [CountriesWhereInput!]
  OR: [CountriesWhereInput!]
  RegionId: StringNullableFilter
  Regions: RegionsRelationFilter
  Sales: SalesListRelationFilter
  UpdatedAt: DateTimeFilter
}

input CountriesWhereUniqueInput {
  CountryManagerId: String
  Id: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type ItemTypes {
  CreatedAt: DateTime!
  DeletedAt: DateTime
  Id: String!
  Name: String
  Sales(cursor: SalesWhereUniqueInput, distinct: [SalesScalarFieldEnum!], orderBy: [SalesOrderByInput!], skip: Int, take: Int, where: SalesWhereInput): [Sales!]!
  UnitPrice: Float!
  UpdatedAt: DateTime!
}

input ItemTypesCreateInput {
  CreatedAt: DateTime
  DeletedAt: DateTime
  Id: String!
  Name: String
  Sales: SalesCreateNestedManyWithoutItemTypesInput
  UnitPrice: Float!
  UpdatedAt: DateTime
}

input ItemTypesCreateNestedOneWithoutSalesInput {
  connect: ItemTypesWhereUniqueInput
  connectOrCreate: ItemTypesCreateOrConnectWithoutSalesInput
  create: ItemTypesCreateWithoutSalesInput
}

input ItemTypesCreateOrConnectWithoutSalesInput {
  create: ItemTypesCreateWithoutSalesInput!
  where: ItemTypesWhereUniqueInput!
}

input ItemTypesCreateWithoutSalesInput {
  CreatedAt: DateTime
  DeletedAt: DateTime
  Id: String!
  Name: String
  UnitPrice: Float!
  UpdatedAt: DateTime
}

input ItemTypesOrderByInput {
  CreatedAt: SortOrder
  DeletedAt: SortOrder
  Id: SortOrder
  Name: SortOrder
  UnitPrice: SortOrder
  UpdatedAt: SortOrder
}

input ItemTypesRelationFilter {
  is: ItemTypesWhereInput
  isNot: ItemTypesWhereInput
}

enum ItemTypesScalarFieldEnum {
  CreatedAt
  DeletedAt
  Id
  Name
  UnitPrice
  UpdatedAt
}

input ItemTypesWhereInput {
  AND: [ItemTypesWhereInput!]
  CreatedAt: DateTimeFilter
  DeletedAt: DateTimeNullableFilter
  Id: StringFilter
  NOT: [ItemTypesWhereInput!]
  Name: StringNullableFilter
  OR: [ItemTypesWhereInput!]
  Sales: SalesListRelationFilter
  UnitPrice: FloatFilter
  UpdatedAt: DateTimeFilter
}

input ItemTypesWhereUniqueInput {
  Id: String
}

type Mutation {
  createAppRoles(data: AppRolesCreateInput!): AppRoles!
  createAppUsers(data: AppUsersCreateInput!): AppUsers!
  createCountries(data: CountriesCreateInput!): Countries!
  createItemTypes(data: ItemTypesCreateInput!): ItemTypes!
  createRegions(data: RegionsCreateInput!): Regions!
  createSales(data: SalesCreateInput!): Sales!
  createUserRoles(data: UserRolesCreateInput!): UserRoles!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  findManyAppRoles(cursor: AppRolesWhereUniqueInput, distinct: [AppRolesScalarFieldEnum!], orderBy: [AppRolesOrderByInput!], skip: Int, take: Int, where: AppRolesWhereInput): [AppRoles!]!
  findManyAppUsers(cursor: AppUsersWhereUniqueInput, distinct: [AppUsersScalarFieldEnum!], orderBy: [AppUsersOrderByInput!], skip: Int, take: Int, where: AppUsersWhereInput): [AppUsers!]!
  findManyCountries(cursor: CountriesWhereUniqueInput, distinct: [CountriesScalarFieldEnum!], orderBy: [CountriesOrderByInput!], skip: Int, take: Int, where: CountriesWhereInput): [Countries!]!
  findManyItemTypes(cursor: ItemTypesWhereUniqueInput, distinct: [ItemTypesScalarFieldEnum!], orderBy: [ItemTypesOrderByInput!], skip: Int, take: Int, where: ItemTypesWhereInput): [ItemTypes!]!
  findManyRegions(cursor: RegionsWhereUniqueInput, distinct: [RegionsScalarFieldEnum!], orderBy: [RegionsOrderByInput!], skip: Int, take: Int, where: RegionsWhereInput): [Regions!]!
  findManySales(cursor: SalesWhereUniqueInput, distinct: [SalesScalarFieldEnum!], orderBy: [SalesOrderByInput!], skip: Int, take: Int, where: SalesWhereInput): [Sales!]!
  findManyUserRoles(cursor: UserRolesWhereUniqueInput, distinct: [UserRolesScalarFieldEnum!], orderBy: [UserRolesOrderByInput!], skip: Int, take: Int, where: UserRolesWhereInput): [UserRoles!]!
  findUniqueAppRoles(where: AppRolesWhereUniqueInput!): AppRoles
  findUniqueAppUsers(where: AppUsersWhereUniqueInput!): AppUsers
  findUniqueCountries(where: CountriesWhereUniqueInput!): Countries
  findUniqueItemTypes(where: ItemTypesWhereUniqueInput!): ItemTypes
  findUniqueRegions(where: RegionsWhereUniqueInput!): Regions
  findUniqueSales(where: SalesWhereUniqueInput!): Sales
  findUniqueUserRoles(where: UserRolesWhereUniqueInput!): UserRoles
}

type Regions {
  AppUsers: AppUsers!
  Countries(cursor: CountriesWhereUniqueInput, distinct: [CountriesScalarFieldEnum!], orderBy: [CountriesOrderByInput!], skip: Int, take: Int, where: CountriesWhereInput): [Countries!]!
  CreatedAt: DateTime!
  DeletedAt: DateTime
  Id: String!
  RegionManagerId: String!
  RegionName: String
  UpdatedAt: DateTime!
}

input RegionsCreateInput {
  AppUsers: AppUsersCreateNestedOneWithoutRegionsInput!
  Countries: CountriesCreateNestedManyWithoutRegionsInput
  CreatedAt: DateTime
  DeletedAt: DateTime
  Id: String!
  RegionName: String
  UpdatedAt: DateTime
}

input RegionsCreateNestedOneWithoutAppUsersInput {
  connect: RegionsWhereUniqueInput
  connectOrCreate: RegionsCreateOrConnectWithoutAppUsersInput
  create: RegionsCreateWithoutAppUsersInput
}

input RegionsCreateNestedOneWithoutCountriesInput {
  connect: RegionsWhereUniqueInput
  connectOrCreate: RegionsCreateOrConnectWithoutCountriesInput
  create: RegionsCreateWithoutCountriesInput
}

input RegionsCreateOrConnectWithoutAppUsersInput {
  create: RegionsCreateWithoutAppUsersInput!
  where: RegionsWhereUniqueInput!
}

input RegionsCreateOrConnectWithoutCountriesInput {
  create: RegionsCreateWithoutCountriesInput!
  where: RegionsWhereUniqueInput!
}

input RegionsCreateWithoutAppUsersInput {
  Countries: CountriesCreateNestedManyWithoutRegionsInput
  CreatedAt: DateTime
  DeletedAt: DateTime
  Id: String!
  RegionName: String
  UpdatedAt: DateTime
}

input RegionsCreateWithoutCountriesInput {
  AppUsers: AppUsersCreateNestedOneWithoutRegionsInput!
  CreatedAt: DateTime
  DeletedAt: DateTime
  Id: String!
  RegionName: String
  UpdatedAt: DateTime
}

input RegionsOrderByInput {
  CreatedAt: SortOrder
  DeletedAt: SortOrder
  Id: SortOrder
  RegionManagerId: SortOrder
  RegionName: SortOrder
  UpdatedAt: SortOrder
}

input RegionsRelationFilter {
  is: RegionsWhereInput
  isNot: RegionsWhereInput
}

enum RegionsScalarFieldEnum {
  CreatedAt
  DeletedAt
  Id
  RegionManagerId
  RegionName
  UpdatedAt
}

input RegionsWhereInput {
  AND: [RegionsWhereInput!]
  AppUsers: AppUsersRelationFilter
  Countries: CountriesListRelationFilter
  CreatedAt: DateTimeFilter
  DeletedAt: DateTimeNullableFilter
  Id: StringFilter
  NOT: [RegionsWhereInput!]
  OR: [RegionsWhereInput!]
  RegionManagerId: StringFilter
  RegionName: StringNullableFilter
  UpdatedAt: DateTimeFilter
}

input RegionsWhereUniqueInput {
  Id: String
  RegionManagerId: String
}

type RoleClaims {
  ClaimType: String
  ClaimValue: String
  Id: Int!
  RoleId: String!
}

input RoleClaimsCreateManyAppRolesInput {
  ClaimType: String
  ClaimValue: String
}

input RoleClaimsCreateManyAppRolesInputEnvelope {
  data: [RoleClaimsCreateManyAppRolesInput!]!
}

input RoleClaimsCreateNestedManyWithoutAppRolesInput {
  connect: [RoleClaimsWhereUniqueInput!]
  connectOrCreate: [RoleClaimsCreateOrConnectWithoutAppRolesInput!]
  create: [RoleClaimsCreateWithoutAppRolesInput!]
  createMany: RoleClaimsCreateManyAppRolesInputEnvelope
}

input RoleClaimsCreateOrConnectWithoutAppRolesInput {
  create: RoleClaimsCreateWithoutAppRolesInput!
  where: RoleClaimsWhereUniqueInput!
}

input RoleClaimsCreateWithoutAppRolesInput {
  ClaimType: String
  ClaimValue: String
}

input RoleClaimsListRelationFilter {
  every: RoleClaimsWhereInput
  none: RoleClaimsWhereInput
  some: RoleClaimsWhereInput
}

input RoleClaimsOrderByInput {
  ClaimType: SortOrder
  ClaimValue: SortOrder
  Id: SortOrder
  RoleId: SortOrder
}

enum RoleClaimsScalarFieldEnum {
  ClaimType
  ClaimValue
  Id
  RoleId
}

input RoleClaimsWhereInput {
  AND: [RoleClaimsWhereInput!]
  AppRoles: AppRolesRelationFilter
  ClaimType: StringNullableFilter
  ClaimValue: StringNullableFilter
  Id: IntFilter
  NOT: [RoleClaimsWhereInput!]
  OR: [RoleClaimsWhereInput!]
  RoleId: StringFilter
}

input RoleClaimsWhereUniqueInput {
  Id: Int
}

type Sales {
  AppUsers: AppUsers!
  Countries: Countries
  CountryId: String
  CreatedAt: DateTime!
  DeletedAt: DateTime
  Id: String!
  ItemTypeId: String!
  ItemTypes: ItemTypes!
  OrderDate: DateTime!
  OrderId: String
  OrderPriority: Int!
  SalesChannel: Int!
  SalesPersonId: String!
  ShipDate: DateTime!
  UnitCost: Float!
  UnitsSold: Int!
  UpdatedAt: DateTime!
}

input SalesCreateInput {
  AppUsers: AppUsersCreateNestedOneWithoutSalesInput!
  Countries: CountriesCreateNestedOneWithoutSalesInput
  CreatedAt: DateTime
  DeletedAt: DateTime
  Id: String!
  ItemTypes: ItemTypesCreateNestedOneWithoutSalesInput!
  OrderDate: DateTime!
  OrderId: String
  OrderPriority: Int!
  SalesChannel: Int!
  ShipDate: DateTime!
  UnitCost: Float!
  UnitsSold: Int!
  UpdatedAt: DateTime
}

input SalesCreateManyAppUsersInput {
  CountryId: String
  CreatedAt: DateTime
  DeletedAt: DateTime
  Id: String!
  ItemTypeId: String!
  OrderDate: DateTime!
  OrderId: String
  OrderPriority: Int!
  SalesChannel: Int!
  ShipDate: DateTime!
  UnitCost: Float!
  UnitsSold: Int!
  UpdatedAt: DateTime
}

input SalesCreateManyAppUsersInputEnvelope {
  data: [SalesCreateManyAppUsersInput!]!
}

input SalesCreateManyCountriesInput {
  CreatedAt: DateTime
  DeletedAt: DateTime
  Id: String!
  ItemTypeId: String!
  OrderDate: DateTime!
  OrderId: String
  OrderPriority: Int!
  SalesChannel: Int!
  SalesPersonId: String!
  ShipDate: DateTime!
  UnitCost: Float!
  UnitsSold: Int!
  UpdatedAt: DateTime
}

input SalesCreateManyCountriesInputEnvelope {
  data: [SalesCreateManyCountriesInput!]!
}

input SalesCreateManyItemTypesInput {
  CountryId: String
  CreatedAt: DateTime
  DeletedAt: DateTime
  Id: String!
  OrderDate: DateTime!
  OrderId: String
  OrderPriority: Int!
  SalesChannel: Int!
  SalesPersonId: String!
  ShipDate: DateTime!
  UnitCost: Float!
  UnitsSold: Int!
  UpdatedAt: DateTime
}

input SalesCreateManyItemTypesInputEnvelope {
  data: [SalesCreateManyItemTypesInput!]!
}

input SalesCreateNestedManyWithoutAppUsersInput {
  connect: [SalesWhereUniqueInput!]
  connectOrCreate: [SalesCreateOrConnectWithoutAppUsersInput!]
  create: [SalesCreateWithoutAppUsersInput!]
  createMany: SalesCreateManyAppUsersInputEnvelope
}

input SalesCreateNestedManyWithoutCountriesInput {
  connect: [SalesWhereUniqueInput!]
  connectOrCreate: [SalesCreateOrConnectWithoutCountriesInput!]
  create: [SalesCreateWithoutCountriesInput!]
  createMany: SalesCreateManyCountriesInputEnvelope
}

input SalesCreateNestedManyWithoutItemTypesInput {
  connect: [SalesWhereUniqueInput!]
  connectOrCreate: [SalesCreateOrConnectWithoutItemTypesInput!]
  create: [SalesCreateWithoutItemTypesInput!]
  createMany: SalesCreateManyItemTypesInputEnvelope
}

input SalesCreateOrConnectWithoutAppUsersInput {
  create: SalesCreateWithoutAppUsersInput!
  where: SalesWhereUniqueInput!
}

input SalesCreateOrConnectWithoutCountriesInput {
  create: SalesCreateWithoutCountriesInput!
  where: SalesWhereUniqueInput!
}

input SalesCreateOrConnectWithoutItemTypesInput {
  create: SalesCreateWithoutItemTypesInput!
  where: SalesWhereUniqueInput!
}

input SalesCreateWithoutAppUsersInput {
  Countries: CountriesCreateNestedOneWithoutSalesInput
  CreatedAt: DateTime
  DeletedAt: DateTime
  Id: String!
  ItemTypes: ItemTypesCreateNestedOneWithoutSalesInput!
  OrderDate: DateTime!
  OrderId: String
  OrderPriority: Int!
  SalesChannel: Int!
  ShipDate: DateTime!
  UnitCost: Float!
  UnitsSold: Int!
  UpdatedAt: DateTime
}

input SalesCreateWithoutCountriesInput {
  AppUsers: AppUsersCreateNestedOneWithoutSalesInput!
  CreatedAt: DateTime
  DeletedAt: DateTime
  Id: String!
  ItemTypes: ItemTypesCreateNestedOneWithoutSalesInput!
  OrderDate: DateTime!
  OrderId: String
  OrderPriority: Int!
  SalesChannel: Int!
  ShipDate: DateTime!
  UnitCost: Float!
  UnitsSold: Int!
  UpdatedAt: DateTime
}

input SalesCreateWithoutItemTypesInput {
  AppUsers: AppUsersCreateNestedOneWithoutSalesInput!
  Countries: CountriesCreateNestedOneWithoutSalesInput
  CreatedAt: DateTime
  DeletedAt: DateTime
  Id: String!
  OrderDate: DateTime!
  OrderId: String
  OrderPriority: Int!
  SalesChannel: Int!
  ShipDate: DateTime!
  UnitCost: Float!
  UnitsSold: Int!
  UpdatedAt: DateTime
}

input SalesListRelationFilter {
  every: SalesWhereInput
  none: SalesWhereInput
  some: SalesWhereInput
}

input SalesOrderByInput {
  CountryId: SortOrder
  CreatedAt: SortOrder
  DeletedAt: SortOrder
  Id: SortOrder
  ItemTypeId: SortOrder
  OrderDate: SortOrder
  OrderId: SortOrder
  OrderPriority: SortOrder
  SalesChannel: SortOrder
  SalesPersonId: SortOrder
  ShipDate: SortOrder
  UnitCost: SortOrder
  UnitsSold: SortOrder
  UpdatedAt: SortOrder
}

enum SalesScalarFieldEnum {
  CountryId
  CreatedAt
  DeletedAt
  Id
  ItemTypeId
  OrderDate
  OrderId
  OrderPriority
  SalesChannel
  SalesPersonId
  ShipDate
  UnitCost
  UnitsSold
  UpdatedAt
}

input SalesWhereInput {
  AND: [SalesWhereInput!]
  AppUsers: AppUsersRelationFilter
  Countries: CountriesRelationFilter
  CountryId: StringNullableFilter
  CreatedAt: DateTimeFilter
  DeletedAt: DateTimeNullableFilter
  Id: StringFilter
  ItemTypeId: StringFilter
  ItemTypes: ItemTypesRelationFilter
  NOT: [SalesWhereInput!]
  OR: [SalesWhereInput!]
  OrderDate: DateTimeFilter
  OrderId: StringNullableFilter
  OrderPriority: IntFilter
  SalesChannel: IntFilter
  SalesPersonId: StringFilter
  ShipDate: DateTimeFilter
  UnitCost: FloatFilter
  UnitsSold: IntFilter
  UpdatedAt: DateTimeFilter
}

input SalesWhereUniqueInput {
  Id: String
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type UserClaims {
  ClaimType: String
  ClaimValue: String
  Id: Int!
  UserId: String!
}

input UserClaimsCreateManyAppUsersInput {
  ClaimType: String
  ClaimValue: String
}

input UserClaimsCreateManyAppUsersInputEnvelope {
  data: [UserClaimsCreateManyAppUsersInput!]!
}

input UserClaimsCreateNestedManyWithoutAppUsersInput {
  connect: [UserClaimsWhereUniqueInput!]
  connectOrCreate: [UserClaimsCreateOrConnectWithoutAppUsersInput!]
  create: [UserClaimsCreateWithoutAppUsersInput!]
  createMany: UserClaimsCreateManyAppUsersInputEnvelope
}

input UserClaimsCreateOrConnectWithoutAppUsersInput {
  create: UserClaimsCreateWithoutAppUsersInput!
  where: UserClaimsWhereUniqueInput!
}

input UserClaimsCreateWithoutAppUsersInput {
  ClaimType: String
  ClaimValue: String
}

input UserClaimsListRelationFilter {
  every: UserClaimsWhereInput
  none: UserClaimsWhereInput
  some: UserClaimsWhereInput
}

input UserClaimsOrderByInput {
  ClaimType: SortOrder
  ClaimValue: SortOrder
  Id: SortOrder
  UserId: SortOrder
}

enum UserClaimsScalarFieldEnum {
  ClaimType
  ClaimValue
  Id
  UserId
}

input UserClaimsWhereInput {
  AND: [UserClaimsWhereInput!]
  AppUsers: AppUsersRelationFilter
  ClaimType: StringNullableFilter
  ClaimValue: StringNullableFilter
  Id: IntFilter
  NOT: [UserClaimsWhereInput!]
  OR: [UserClaimsWhereInput!]
  UserId: StringFilter
}

input UserClaimsWhereUniqueInput {
  Id: Int
}

type UserLogins {
  LoginProvider: String!
  ProviderDisplayName: String
  ProviderKey: String!
  UserId: String!
}

input UserLoginsCreateManyAppUsersInput {
  LoginProvider: String!
  ProviderDisplayName: String
  ProviderKey: String!
}

input UserLoginsCreateManyAppUsersInputEnvelope {
  data: [UserLoginsCreateManyAppUsersInput!]!
}

input UserLoginsCreateNestedManyWithoutAppUsersInput {
  connect: [UserLoginsWhereUniqueInput!]
  connectOrCreate: [UserLoginsCreateOrConnectWithoutAppUsersInput!]
  create: [UserLoginsCreateWithoutAppUsersInput!]
  createMany: UserLoginsCreateManyAppUsersInputEnvelope
}

input UserLoginsCreateOrConnectWithoutAppUsersInput {
  create: UserLoginsCreateWithoutAppUsersInput!
  where: UserLoginsWhereUniqueInput!
}

input UserLoginsCreateWithoutAppUsersInput {
  LoginProvider: String!
  ProviderDisplayName: String
  ProviderKey: String!
}

input UserLoginsListRelationFilter {
  every: UserLoginsWhereInput
  none: UserLoginsWhereInput
  some: UserLoginsWhereInput
}

input UserLoginsLoginProviderProviderKeyCompoundUniqueInput {
  LoginProvider: String!
  ProviderKey: String!
}

input UserLoginsOrderByInput {
  LoginProvider: SortOrder
  ProviderDisplayName: SortOrder
  ProviderKey: SortOrder
  UserId: SortOrder
}

enum UserLoginsScalarFieldEnum {
  LoginProvider
  ProviderDisplayName
  ProviderKey
  UserId
}

input UserLoginsWhereInput {
  AND: [UserLoginsWhereInput!]
  AppUsers: AppUsersRelationFilter
  LoginProvider: StringFilter
  NOT: [UserLoginsWhereInput!]
  OR: [UserLoginsWhereInput!]
  ProviderDisplayName: StringNullableFilter
  ProviderKey: StringFilter
  UserId: StringFilter
}

input UserLoginsWhereUniqueInput {
  LoginProvider_ProviderKey: UserLoginsLoginProviderProviderKeyCompoundUniqueInput
}

type UserRoles {
  AppRoles: AppRoles!
  AppUsers: AppUsers!
  RoleId: String!
  UserId: String!
}

input UserRolesCreateInput {
  AppRoles: AppRolesCreateNestedOneWithoutUserRolesInput!
  AppUsers: AppUsersCreateNestedOneWithoutUserRolesInput!
}

input UserRolesCreateManyAppRolesInput {
  UserId: String!
}

input UserRolesCreateManyAppRolesInputEnvelope {
  data: [UserRolesCreateManyAppRolesInput!]!
}

input UserRolesCreateManyAppUsersInput {
  RoleId: String!
}

input UserRolesCreateManyAppUsersInputEnvelope {
  data: [UserRolesCreateManyAppUsersInput!]!
}

input UserRolesCreateNestedManyWithoutAppRolesInput {
  connect: [UserRolesWhereUniqueInput!]
  connectOrCreate: [UserRolesCreateOrConnectWithoutAppRolesInput!]
  create: [UserRolesCreateWithoutAppRolesInput!]
  createMany: UserRolesCreateManyAppRolesInputEnvelope
}

input UserRolesCreateNestedManyWithoutAppUsersInput {
  connect: [UserRolesWhereUniqueInput!]
  connectOrCreate: [UserRolesCreateOrConnectWithoutAppUsersInput!]
  create: [UserRolesCreateWithoutAppUsersInput!]
  createMany: UserRolesCreateManyAppUsersInputEnvelope
}

input UserRolesCreateOrConnectWithoutAppRolesInput {
  create: UserRolesCreateWithoutAppRolesInput!
  where: UserRolesWhereUniqueInput!
}

input UserRolesCreateOrConnectWithoutAppUsersInput {
  create: UserRolesCreateWithoutAppUsersInput!
  where: UserRolesWhereUniqueInput!
}

input UserRolesCreateWithoutAppRolesInput {
  AppUsers: AppUsersCreateNestedOneWithoutUserRolesInput!
}

input UserRolesCreateWithoutAppUsersInput {
  AppRoles: AppRolesCreateNestedOneWithoutUserRolesInput!
}

input UserRolesListRelationFilter {
  every: UserRolesWhereInput
  none: UserRolesWhereInput
  some: UserRolesWhereInput
}

input UserRolesOrderByInput {
  RoleId: SortOrder
  UserId: SortOrder
}

enum UserRolesScalarFieldEnum {
  RoleId
  UserId
}

input UserRolesUserIdRoleIdCompoundUniqueInput {
  RoleId: String!
  UserId: String!
}

input UserRolesWhereInput {
  AND: [UserRolesWhereInput!]
  AppRoles: AppRolesRelationFilter
  AppUsers: AppUsersRelationFilter
  NOT: [UserRolesWhereInput!]
  OR: [UserRolesWhereInput!]
  RoleId: StringFilter
  UserId: StringFilter
}

input UserRolesWhereUniqueInput {
  UserId_RoleId: UserRolesUserIdRoleIdCompoundUniqueInput
}

type UserTokens {
  LoginProvider: String!
  Name: String!
  UserId: String!
  Value: String
}

input UserTokensCreateManyAppUsersInput {
  LoginProvider: String!
  Name: String!
  Value: String
}

input UserTokensCreateManyAppUsersInputEnvelope {
  data: [UserTokensCreateManyAppUsersInput!]!
}

input UserTokensCreateNestedManyWithoutAppUsersInput {
  connect: [UserTokensWhereUniqueInput!]
  connectOrCreate: [UserTokensCreateOrConnectWithoutAppUsersInput!]
  create: [UserTokensCreateWithoutAppUsersInput!]
  createMany: UserTokensCreateManyAppUsersInputEnvelope
}

input UserTokensCreateOrConnectWithoutAppUsersInput {
  create: UserTokensCreateWithoutAppUsersInput!
  where: UserTokensWhereUniqueInput!
}

input UserTokensCreateWithoutAppUsersInput {
  LoginProvider: String!
  Name: String!
  Value: String
}

input UserTokensListRelationFilter {
  every: UserTokensWhereInput
  none: UserTokensWhereInput
  some: UserTokensWhereInput
}

input UserTokensOrderByInput {
  LoginProvider: SortOrder
  Name: SortOrder
  UserId: SortOrder
  Value: SortOrder
}

enum UserTokensScalarFieldEnum {
  LoginProvider
  Name
  UserId
  Value
}

input UserTokensUserIdLoginProviderNameCompoundUniqueInput {
  LoginProvider: String!
  Name: String!
  UserId: String!
}

input UserTokensWhereInput {
  AND: [UserTokensWhereInput!]
  AppUsers: AppUsersRelationFilter
  LoginProvider: StringFilter
  NOT: [UserTokensWhereInput!]
  Name: StringFilter
  OR: [UserTokensWhereInput!]
  UserId: StringFilter
  Value: StringNullableFilter
}

input UserTokensWhereUniqueInput {
  UserId_LoginProvider_Name: UserTokensUserIdLoginProviderNameCompoundUniqueInput
}
